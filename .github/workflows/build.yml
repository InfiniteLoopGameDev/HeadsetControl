name: Build
on: [push, pull_request]

jobs:
  build:
    env:
      buildDir: '${{ github.workspace }}/build'

    name: ${{ matrix.os }}-compile
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            INSTALL_DEPS: sudo apt-get -y install libhidapi-dev
            GENERATOR: makefile
            PRESET: makefile-release
            shell: bash
            UNIX: 1
          - os: macos-latest
            triplet: x64-osx
            INSTALL_DEPS: brew install hidapi
            GENERATOR: makefile
            PRESET: makefile-release
            shell: bash
            UNIX: 1
          - os: windows-latest
            GENERATOR: msys2
            PRESET: msys2-release
            shell: msys2
            UNIX: 0
    defaults:
      run:
        shell: ${{ matrix.shell }} {0}
    steps:
      - uses: actions/checkout@v1

      - uses: lukka/get-cmake@latest
        if: ${{ matrix.UNIX == 1 }}

      - name: Install Dependencies
        run: ${{ matrix.INSTALL_DEPS }}
        if: ${{ matrix.UNIX == 1 }}

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          release: false
          install: git base-devel mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-hidapi make
        if: ${{ matrix.UNIX == 0 }}

      - name: Run CMake with Makefile
        uses: lukka/run-cmake@v10
        id: runcmake
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          configurePreset: '${{ matrix.GENERATOR }}'
          buildPreset: '${{ matrix.PRESET }}'

      #- name: Run CMake on Windows # TODO use CMakePresets
      #  run: |
      #    mkdir build
      #    cd build
      #    cmake -G"MSYS Makefiles" ..
      #    make
      #  shell: msys2 {0}
      #  if: ${{ matrix.UNIX == 0 }}

      - name: Run test
        run: cd ${{ env.buildDir }} && ctest

      - name: Copy Artifacts
        run: |
          cd ${{ env.buildDir }}
          mkdir -p "artifacts/$RUNNER_OS"
          cp headsetcontrol* "artifacts/$RUNNER_OS/"

      - uses: actions/upload-artifact@v3
        with:
          path: '${{ env.buildDir }}/artifacts/**/*'

